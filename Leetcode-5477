给你一个 n x n 的二进制网格 grid，每一次操作中，你可以选择网格的 相邻两行 进行交换。
一个符合要求的网格需要满足主对角线以上的格子全部都是 0 。
请你返回使网格满足要求的最少操作次数，如果无法使网格符合要求，请你返回 -1 。
主对角线指的是从 (1, 1) 到 (n, n) 的这些格子。
示例 1：
输入：grid = [[0,0,1],[1,1,0],[1,0,0]]
输出：3
示例 2：
输入：grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
输出：-1
解释：所有行都是一样的，交换相邻行无法使网格符合要求。
示例 3：
输入：grid = [[1,0,0],[1,1,0],[1,1,1]]
输出：0
提示：

    n == grid.length
    n == grid[i].length
    1 <= n <= 200
    grid[i][j] 要么是 0 要么是 1 。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-swaps-to-arrange-a-binary-grid
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
# solution
class Solution:
    def minSwaps(self, grid: List[List[int]]) -> int:
        if not grid: return 0
        # 统计每一行 从右向左连续0的个数
        n = len(grid)
        zero_nums = []
        for i in range(n):
            j = n - 1
            while j >= 0 and grid[i][j] == 0: j -= 1
            zero_nums.append(n - 1 - j)
        # 贪心算法，从上到下查找满足条件的最小下标，即为交换到当前行的次数
        cnt = 0
        for i in range(n - 1):
            need_zeros = n - 1 - i

            j = i
            while j < len(zero_nums) and zero_nums[j] < need_zeros: j += 1
            
            # 没找到则说明不满足条件
            if j == len(zero_nums): return -1

            # 增加交换次数
            cnt += j - i
            # 交换数值
            while j > i:
                zero_nums[j], zero_nums[j-1]= zero_nums[j-1], zero_nums[j]
                j -= 1
        return cnt
