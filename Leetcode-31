实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/next-permutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        if n<2:
            return nums
        def reverse(ind):  
            """
            把nums[ind:]进行翻转
            """
            a, b = ind, n-1
            while a<b:
                nums[a], nums[b] = nums[b], nums[a]
                a += 1
                b -= 1
        for i in range(n-1, 0, -1):
            if nums[i-1]<nums[i]:
                if i==n-1:  
                    # 如果刚好是最后两位则将其换位后输出
                    nums[i-1], nums[i] = nums[i], nums[i-1]
                    return nums
                else:
                    if nums[i-1]<nums[n-1]:
                        # 如果nums[i-1]小于nums[i:]中最小值，则将原最小值换过来，再翻转
                        nums[i-1], nums[n-1] = nums[n-1], nums[i-1]
                        reverse(i) # i begin
                        return nums
                    else:
                        for j in range(i, n):
                            # 如果nums[i-1]后面有更小的，则交换再翻转
                            if nums[i-1]>=nums[j]:
                                nums[i-1], nums[j-1] = nums[j-1], nums[i-1]
                                reverse(i)
                                return nums
        reverse(0)  # 如果是最大的，则翻转成最小的               
        return nums
