1576
给你一个仅包含小写英文字母和 '?' 字符的字符串 s<var> </var>，请你将所有的 '?' 转换为若干小写字母，使最终的字符串不包含任何 连续重复 的字符。
注意：你 不能 修改非 '?' 字符。
题目测试用例保证 除 '?' 字符 之外，不存在连续重复的字符。
在完成所有转换（可能无需转换）后返回最终的字符串。如果有多个解决方案，请返回其中任何一个。可以证明，在给定的约束条件下，答案总是存在的。
示例 1：
输入：s = "?zs"
输出："azs"
解释：该示例共有 25 种解决方案，从 "azs" 到 "yzs" 都是符合题目要求的。只有 "z" 是无效的修改，因为字符串 "zzs" 中有连续重复的两个 'z' 。
示例 2：
输入：s = "ubv?w"
输出："ubvaw"
解释：该示例共有 24 种解决方案，只有替换成 "v" 和 "w" 不符合题目要求。因为 "ubvvw" 和 "ubvww" 都包含连续重复的字符。
示例 3：
输入：s = "j?qg??b"
输出："jaqgacb"
示例 4：
输入：s = "??yw?ipkj?"
输出："acywaipkja"
提示：
    1 <= s.length <= 100
    s 仅包含小写英文字母和 '?' 字符
来源：力扣（LeetCode）
链接：力扣
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution:
 def modifyString(self, s: str) -> str:
        s1= 'abcdefghijklmnopqrstuvwxyz'
        res = list('0'+s+'0')
        i=1 
 while i<len(res)-1:
 if res[i]=='?':
                j=0
 while j<len(s1):
 if s1[j] not in [res[i-1],res[i+1]]:
                        res[i]=s1[j]
 break
                    j+=1
            i+=1
 return ''.join(res[1:-1])
# 5508
 给你两个整数数组 nums1 和 nums2 ，请你返回根据以下规则形成的三元组的数目（类型 1 和类型 2 ）：
 

    类型 1：三元组 (i, j, k) ，如果 nums1[i]2 == nums2[j] * nums2[k] 其中 0 <= i < nums1.length 且 0 <= j < k < nums2.length
    类型 2：三元组 (i, j, k) ，如果 nums2[i]2 == nums1[j] * nums1[k] 其中 0 <= i < nums2.length 且 0 <= j < k < nums1.length

  
 示例 1：
 输入：nums1 = [7,4], nums2 = [5,2,8,9] 输出：1 解释：类型 1：(1,1,2), nums1[1]^2 = nums2[1] * nums2[2] (4^2 = 2 * 8)
 示例 2：
 输入：nums1 = [1,1], nums2 = [1,1,1] 输出：9 解释：所有三元组都符合题目要求，因为 1^2 = 1 * 1 类型 1：(0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2), nums1[i]^2 = nums2[j] * nums2[k] 类型 2：(0,0,1), (1,0,1), (2,0,1), nums2[i]^2 = nums1[j] * nums1[k] 
 示例 3：
 输入：nums1 = [7,7,8,3], nums2 = [1,2,9,7] 输出：2 解释：有两个符合题目要求的三元组 类型 1：(3,0,2), nums1[3]^2 = nums2[0] * nums2[2] 类型 2：(3,0,1), nums2[3]^2 = nums1[0] * nums1[1] 
 示例 4：
 输入：nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18] 输出：0 解释：不存在符合题目要求的三元组 
  
 提示：
 

    1 <= nums1.length, nums2.length <= 1000
    1 <= nums1[i], nums2[i] <= 10^5

 class Solution:
    def numTriplets(self, nums1: list, nums2: list) -> int:
        # 字典记录数组积
        def initPower(arr: list) -> dict:
            dic = {}
            for i in range(len(arr)):
                for j in range(i + 1, len(arr)):
                    t = arr[i] * arr[j]
                    if t not in dic:
                        dic[t] = 1
                    else:
                        dic[t] += 1
            return dic
        # 统计个数
        def sumAns(nums: list, dic: dict):
            ans = 0
            for num in nums:
                t = num * num
                if t in dic:
                    ans += dic[t]
            return ans
        dic1 = initPower(nums1)
        dic2 = initPower(nums2)
        return sumAns(nums1, dic2) + sumAns(nums2, dic1)

